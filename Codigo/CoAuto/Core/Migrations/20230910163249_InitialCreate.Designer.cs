// <auto-generated />
using System;
using Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(CoAutoContext))]
    [Migration("20230910163249_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Aluguel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataAvaliacaoCliente")
                        .HasColumnType("datetime")
                        .HasColumnName("dataAvaliacaoCliente");

                    b.Property<DateTime?>("DataAvaliacaoProprietario")
                        .HasColumnType("datetime")
                        .HasColumnName("dataAvaliacaoProprietario");

                    b.Property<string>("DataHoraAluguel")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("dataHoraAluguel");

                    b.Property<string>("DescricaoAvaliacaoCliente")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descricaoAvaliacaoCliente");

                    b.Property<string>("DescricaoAvaliacaoProprietario")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descricaoAvaliacaoProprietario");

                    b.Property<uint?>("IdAvaliacaoCliente")
                        .HasColumnType("int unsigned")
                        .HasColumnName("idAvaliacaoCliente");

                    b.Property<uint?>("IdDevolucao")
                        .HasColumnType("int unsigned")
                        .HasColumnName("idDevolucao");

                    b.Property<uint?>("IdEntrega")
                        .HasColumnType("int unsigned")
                        .HasColumnName("idEntrega");

                    b.Property<uint>("IdPessoa")
                        .HasColumnType("int unsigned");

                    b.Property<int>("IdVeiculo")
                        .HasColumnType("int")
                        .HasColumnName("idVeiculo");

                    b.Property<sbyte?>("QtdEstrelasAvaliacaoCliente")
                        .HasColumnType("tinyint")
                        .HasColumnName("qtdEstrelasAvaliacaoCliente");

                    b.Property<byte?>("QtdEstrelasAvaliacaoProprietario")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("qtdEstrelasAvaliacaoProprietario");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("enum('andamento','concluido','cancelado')")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdDevolucao" }, "fkAluguelDevolucao");

                    b.HasIndex(new[] { "IdEntrega" }, "fkAluguelEntrega");

                    b.HasIndex(new[] { "IdPessoa" }, "fkAluguelPessoa");

                    b.HasIndex(new[] { "IdVeiculo" }, "fkAluguelVeiculo");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique();

                    b.ToTable("aluguel", (string)null);
                });

            modelBuilder.Entity("Core.Banco", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("banco", (string)null);
                });

            modelBuilder.Entity("Core.Devolucao", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime")
                        .HasColumnName("dataHora");

                    b.Property<byte[]>("Foto1")
                        .HasColumnType("blob")
                        .HasColumnName("foto1");

                    b.Property<byte[]>("Foto2")
                        .HasColumnType("blob")
                        .HasColumnName("foto2");

                    b.Property<byte[]>("Foto3")
                        .HasColumnType("blob")
                        .HasColumnName("foto3");

                    b.Property<byte[]>("Foto4")
                        .HasColumnType("blob")
                        .HasColumnName("foto4");

                    b.Property<byte[]>("Foto5")
                        .HasColumnType("blob")
                        .HasColumnName("foto5");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DataHora" }, "dataHora");

                    b.ToTable("devolucao", (string)null);
                });

            modelBuilder.Entity("Core.Disponibilidade", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("date")
                        .HasColumnName("dataFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("date")
                        .HasColumnName("dataInicio");

                    b.Property<TimeSpan>("HoraFim")
                        .HasColumnType("time")
                        .HasColumnName("horaFim");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time")
                        .HasColumnName("horaInicio");

                    b.Property<int>("IdVeiculo")
                        .HasColumnType("int")
                        .HasColumnName("idVeiculo");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdVeiculo" }, "fkDisponibilidadeVeiculo");

                    b.ToTable("disponibilidade", (string)null);
                });

            modelBuilder.Entity("Core.Entrega", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime")
                        .HasColumnName("dataHora");

                    b.Property<byte[]>("Foto1")
                        .HasColumnType("blob")
                        .HasColumnName("foto1");

                    b.Property<byte[]>("Foto2")
                        .HasColumnType("blob")
                        .HasColumnName("foto2");

                    b.Property<byte[]>("Foto3")
                        .HasColumnType("blob")
                        .HasColumnName("foto3");

                    b.Property<byte[]>("Foto4")
                        .HasColumnType("blob")
                        .HasColumnName("foto4");

                    b.Property<byte[]>("Foto5")
                        .HasColumnType("blob")
                        .HasColumnName("foto5");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DataHora" }, "dataHora")
                        .HasDatabaseName("dataHora1");

                    b.ToTable("entrega", (string)null);
                });

            modelBuilder.Entity("Core.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("marca", (string)null);
                });

            modelBuilder.Entity("Core.Modelo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int")
                        .HasColumnName("idMarca");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdMarca" }, "fkModeloMarca");

                    b.ToTable("modelo", (string)null);
                });

            modelBuilder.Entity("Core.Pagamento", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<string>("FormaPagamento")
                        .IsRequired()
                        .HasColumnType("enum('a vista','parcelado','pix')")
                        .HasColumnName("formaPagamento");

                    b.Property<int>("IdAluguel")
                        .HasColumnType("int")
                        .HasColumnName("idAluguel");

                    b.Property<float>("Valor")
                        .HasColumnType("float")
                        .HasColumnName("valor");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdAluguel" }, "fkPagamentoVeiculo");

                    b.HasIndex(new[] { "Valor" }, "valor");

                    b.ToTable("pagamento", (string)null);
                });

            modelBuilder.Entity("Core.Pessoa", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Agencia")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("agencia");

                    b.Property<sbyte>("Autorizado")
                        .HasColumnType("tinyint")
                        .HasColumnName("autorizado");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Chavepix")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("chavepix");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cidade");

                    b.Property<string>("Cnh")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("cnh");

                    b.Property<string>("ContaCorrente")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("contaCorrente");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DataAutorizacao")
                        .HasColumnType("datetime")
                        .HasColumnName("dataAutorizacao");

                    b.Property<string>("DataNascimento")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("dataNascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("estado");

                    b.Property<byte[]>("Fotocnh")
                        .HasColumnType("blob")
                        .HasColumnName("fotocnh");

                    b.Property<byte[]>("Fotoperfil")
                        .HasColumnType("blob")
                        .HasColumnName("fotoperfil");

                    b.Property<uint>("IdBanco")
                        .HasColumnType("int unsigned")
                        .HasColumnName("idBanco");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("numero");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rua");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("senha");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(23)
                        .HasColumnType("varchar(23)")
                        .HasColumnName("telefone");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("enum('cliente','proprietario')")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "Cpf" }, "cpf");

                    b.HasIndex(new[] { "IdBanco" }, "fkPessoaBanco");

                    b.HasIndex(new[] { "Nome" }, "nome");

                    b.ToTable("pessoa", (string)null);
                });

            modelBuilder.Entity("Core.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Ano")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("ano");

                    b.Property<sbyte>("Autorizado")
                        .HasColumnType("tinyint")
                        .HasColumnName("autorizado");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cambio")
                        .IsRequired()
                        .HasColumnType("enum('automatico','manual')")
                        .HasColumnName("cambio");

                    b.Property<string>("Carroceria")
                        .HasColumnType("enum('hatch','sedan','picape','suv')")
                        .HasColumnName("carroceria");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cidade");

                    b.Property<int?>("Cilindradas")
                        .HasColumnType("int")
                        .HasColumnName("cilindradas");

                    b.Property<string>("Combustivel")
                        .IsRequired()
                        .HasColumnType("enum('flex','gasolina','etanol','diesel','gnv')")
                        .HasColumnName("combustivel");

                    b.Property<string>("Crlv")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("crlv");

                    b.Property<DateTime>("DataAutorizacao")
                        .HasColumnType("datetime")
                        .HasColumnName("dataAutorizacao");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("estado");

                    b.Property<int>("IdModelo")
                        .HasColumnType("int")
                        .HasColumnName("idModelo");

                    b.Property<uint>("IdPessoa")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("numero");

                    b.Property<string>("Passageiro")
                        .HasColumnType("enum('4','5','6','7','8')")
                        .HasColumnName("passageiro");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("placa");

                    b.Property<string>("Portas")
                        .HasColumnType("enum('2','3','4')")
                        .HasColumnName("portas");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rua");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("enum('moto','carro')")
                        .HasColumnName("tipo");

                    b.Property<float>("Valor")
                        .HasColumnType("float")
                        .HasColumnName("valor");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPessoa" }, "fkPessoaVeiculo");

                    b.HasIndex(new[] { "IdModelo" }, "fkVeiculoModelo");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE1");

                    b.ToTable("veiculo", (string)null);
                });

            modelBuilder.Entity("Core.Aluguel", b =>
                {
                    b.HasOne("Core.Devolucao", "IdDevolucaoNavigation")
                        .WithMany("Aluguels")
                        .HasForeignKey("IdDevolucao")
                        .HasConstraintName("fk%Aluguel%dtable2");

                    b.HasOne("Core.Entrega", "IdEntregaNavigation")
                        .WithMany("Aluguels")
                        .HasForeignKey("IdEntrega")
                        .HasConstraintName("fk%Aluguel%dtable1");

                    b.HasOne("Core.Pessoa", "IdPessoaNavigation")
                        .WithMany("Aluguels")
                        .HasForeignKey("IdPessoa")
                        .IsRequired()
                        .HasConstraintName("fkAluguelUsusario");

                    b.HasOne("Core.Veiculo", "IdVeiculoNavigation")
                        .WithMany("Aluguels")
                        .HasForeignKey("IdVeiculo")
                        .IsRequired()
                        .HasConstraintName("%fk%Aluguel%Veiculo1");

                    b.Navigation("IdDevolucaoNavigation");

                    b.Navigation("IdEntregaNavigation");

                    b.Navigation("IdPessoaNavigation");

                    b.Navigation("IdVeiculoNavigation");
                });

            modelBuilder.Entity("Core.Disponibilidade", b =>
                {
                    b.HasOne("Core.Veiculo", "IdVeiculoNavigation")
                        .WithMany("Disponibilidades")
                        .HasForeignKey("IdVeiculo")
                        .IsRequired()
                        .HasConstraintName("%fk%DisponibilidadeVeiculo%Veiculo1");

                    b.Navigation("IdVeiculoNavigation");
                });

            modelBuilder.Entity("Core.Modelo", b =>
                {
                    b.HasOne("Core.Marca", "IdMarcaNavigation")
                        .WithMany("Modelos")
                        .HasForeignKey("IdMarca")
                        .IsRequired()
                        .HasConstraintName("%fk%Modelo%Marca1");

                    b.Navigation("IdMarcaNavigation");
                });

            modelBuilder.Entity("Core.Pagamento", b =>
                {
                    b.HasOne("Core.Aluguel", "IdAluguelNavigation")
                        .WithMany("Pagamentos")
                        .HasForeignKey("IdAluguel")
                        .IsRequired()
                        .HasConstraintName("%fk%Pagamento%Aluguel1");

                    b.Navigation("IdAluguelNavigation");
                });

            modelBuilder.Entity("Core.Pessoa", b =>
                {
                    b.HasOne("Core.Banco", "IdBancoNavigation")
                        .WithMany("Pessoas")
                        .HasForeignKey("IdBanco")
                        .IsRequired()
                        .HasConstraintName("%fk%Pessoa%Banco1");

                    b.Navigation("IdBancoNavigation");
                });

            modelBuilder.Entity("Core.Veiculo", b =>
                {
                    b.HasOne("Core.Modelo", "IdModeloNavigation")
                        .WithMany("Veiculos")
                        .HasForeignKey("IdModelo")
                        .IsRequired()
                        .HasConstraintName("%fk%Veiculo%Modelo1");

                    b.HasOne("Core.Pessoa", "IdPessoaNavigation")
                        .WithMany("Veiculos")
                        .HasForeignKey("IdPessoa")
                        .IsRequired()
                        .HasConstraintName("%fk%Veiculo%Pessoa1");

                    b.Navigation("IdModeloNavigation");

                    b.Navigation("IdPessoaNavigation");
                });

            modelBuilder.Entity("Core.Aluguel", b =>
                {
                    b.Navigation("Pagamentos");
                });

            modelBuilder.Entity("Core.Banco", b =>
                {
                    b.Navigation("Pessoas");
                });

            modelBuilder.Entity("Core.Devolucao", b =>
                {
                    b.Navigation("Aluguels");
                });

            modelBuilder.Entity("Core.Entrega", b =>
                {
                    b.Navigation("Aluguels");
                });

            modelBuilder.Entity("Core.Marca", b =>
                {
                    b.Navigation("Modelos");
                });

            modelBuilder.Entity("Core.Modelo", b =>
                {
                    b.Navigation("Veiculos");
                });

            modelBuilder.Entity("Core.Pessoa", b =>
                {
                    b.Navigation("Aluguels");

                    b.Navigation("Veiculos");
                });

            modelBuilder.Entity("Core.Veiculo", b =>
                {
                    b.Navigation("Aluguels");

                    b.Navigation("Disponibilidades");
                });
#pragma warning restore 612, 618
        }
    }
}
